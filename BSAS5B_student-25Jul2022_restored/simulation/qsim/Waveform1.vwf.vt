// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/28/2023 13:13:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          X_Accumulator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module X_Accumulator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Clr;
reg Done;
reg Sh;
reg Si;
reg [4:0] Xin;
// wires                                               
wire Xi;
wire [4:0] Xout;

// assign statements (if any)                          
X_Accumulator i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.Clr(Clr),
	.Done(Done),
	.Sh(Sh),
	.Si(Si),
	.Xi(Xi),
	.Xin(Xin),
	.Xout(Xout)
);
initial 
begin 
#1000000 $finish;
end 

// Clk
always
begin
	Clk = 1'b0;
	Clk = #20000 1'b1;
	#20000;
end 

// Clr
initial
begin
	Clr = 1'b0;
	Clr = #10000 1'b1;
	Clr = #20000 1'b0;
end 

// Sh
initial
begin
	Sh = 1'b0;
	Sh = #60000 1'b1;
	Sh = #180000 1'b0;
end 

// Done
initial
begin
	Done = 1'b0;
	Done = #240000 1'b1;
	Done = #20000 1'b0;
end 

// Si
initial
begin
	Si = 1'b0;
	Si = #60000 1'b1;
	Si = #80000 1'b0;
end 
// Xin[ 4 ]
initial
begin
	Xin[4] = 1'b1;
	Xin[4] = #160000 1'b0;
	Xin[4] = #640000 1'b1;
end 
// Xin[ 3 ]
initial
begin
	Xin[3] = 1'b1;
	Xin[3] = #160000 1'b0;
	Xin[3] = #320000 1'b1;
	Xin[3] = #320000 1'b0;
end 
// Xin[ 2 ]
initial
begin
	repeat(3)
	begin
		Xin[2] = 1'b1;
		Xin[2] = #160000 1'b0;
		# 160000;
	end
	Xin[2] = 1'b1;
end 
// Xin[ 1 ]
initial
begin
	repeat(6)
	begin
		Xin[1] = 1'b0;
		Xin[1] = #80000 1'b1;
		# 80000;
	end
	Xin[1] = 1'b0;
end 
// Xin[ 0 ]
initial
begin
	repeat(12)
	begin
		Xin[0] = 1'b0;
		Xin[0] = #40000 1'b1;
		# 40000;
	end
	Xin[0] = 1'b0;
end 
endmodule

